/*
 * To create editors for qb-filters.
 * Can be configured by adding user-defined editor factories.
 *
 * Configuration:
 *   app.config(['QBEditorProvider', function (QBEditorProvider) {
 *     QBEditorProvider.addEditorFactory({
 *       createEditorHtml: function (columnType, op) {
 *         // Return some suitable HTML.
 *         // This may contain Angular directives, since it is compiled before
 *         // being added to the DOM.
 *       }
 *     });
 *
 *     // Add more factories if required.
 *     // The order of addition matters, since factories are tried in order of
 *     // their addition, and the first one that returns some HTML wins.
 *   }]);
 */
angular.module('QBEditorProvider', []).
  provider('QBEditor', [
    function () {
      /**
       * Creates a default editor.
       *
       * @param columnType {string} - The column type.
       * @param op {string} - The operator.
       *
       * @returns {string} The editor HTML. It may contain Angular directives,
       * since it is compiled before being added to the DOM.
       */
      var DEFAULT_EDITOR_HTML = function (columnType, op) {
        var editorHtml = '';
        var opArity = (op === 'range') ? 2 : 1;

        for (var i = 0; i < opArity; ++i) {
          editorHtml += '<input type="' + (columnType || 'text') +
          '" class="filter-value form-control" ng-model="model.values[' +
          i + ']">';
        }

        return editorHtml;
      };

      // The list of user defined editor factories
      var editorFactories = [];

      /**
       * Adds an editor factory.
       * The order of addition is important, since editor creation is tried in
       * the same order.
       *
       * @param factory {{createEditorHtml: function(string, string)}} - Where
       * the function must:
       * * accept a column type and an operator
       * * return a string containing the editor's HTML, or null
       */
      var addEditorFactory = function (factory) {
        editorFactories.push(factory);
      };

      /**
       * Gets the editor HTML as generated by the registered factories.
       * Falls back on a default editor if the user defined factories (tried in
       * order of their addition) fail.
       *
       * @param columnType {string} - The column type.
       * @param op {string} - The operator.
       *
       * @returns {string} The editor HTML.
       */
      var getEditorHtml = function (columnType, op) {
        for (var i = 0;i < editorFactories.length; ++i) {
          var editor = editorFactories[i].createEditorHtml(columnType, op);

          if (editor) {
            return editor;
          }
        }

        return DEFAULT_EDITOR_HTML(columnType, op);
      };

      // Return the provider object
      return {
        addEditorFactory: addEditorFactory,

        // The service object
        $get: function () {
          return {
            getEditorHtml: getEditorHtml
          };
        }
      };
    }]);
